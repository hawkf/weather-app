{"version":3,"sources":["store/action.js","store/reducer.js","utils/const.js","components/location-form/location-form.jsx","hooks/useDebaunse.js","components/result-information-day/result-information-day.jsx","store/api-actions.js","utils/utils.js","components/change-buttons/change-buttons.jsx","components/day-weather-main/day-weather-main.jsx","components/week-weather-main/week-weather-main.jsx","components/page-not-found/page-not-found.jsx","components/app/app.js","index.js","services/api.js"],"names":["ActionType","ActionGenerator","locationName","type","payload","coordinates","weatherData","isLocationCorrect","isDataUpdated","initialState","location","lat","lng","weekWeathers","AppRoute","API_KEY","AppiRoute","connect","state","dispatch","setLocation","useState","setLocationName","debaunsedInputValue","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","onSubmit","evt","preventDefault","className","onChange","currentTarget","onChangeHandler","placeholder","ResultInformationDay","temperature","description","date","fetchCoordinates","_getState","api","get","params","q","appid","then","data","coord","lon","catch","fetchWeekWeather","exclude","units","weatherArray","dateStart","dayjs","Date","weathersResult","map","item","index","add","format","Math","round","temp","day","weather","main","pop","weekWeatherAdapter","daily","slice","swal","ChangeButtons","isDay","history","useHistory","onClick","push","getCoordinates","setWeekWeather","PageNotFound","App","exact","path","axios","create","baseURL","timeout","store","createStore","action","composeWithDevTools","applyMiddleware","thunk","withExtraArgument","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAAaA,EACG,0BADHA,EAEM,6BAFNA,EAGO,8BAHPA,EAIc,mCAJdA,EAKU,+BAGVC,EACE,SAACC,GAAD,MAAmB,CAC9BC,KAAMH,EACNI,QAASF,IAHAD,EAMK,SAACI,GAAD,MAAkB,CAChCF,KAAMH,EACNI,QAASC,IARAJ,EAWM,SAACK,GAAD,MAAkB,CACjCH,KAAMH,EACNI,QAASE,IAbAL,EAgBW,SAACM,GAAD,MAAwB,CAC5CJ,KAAMH,EACNI,QAASG,IAlBAN,EAqBO,SAACO,GAAD,MAAoB,CACpCL,KAAMH,EACNI,QAASI,IC7BPC,EAAe,CACnBC,SAAU,GACVL,YAAa,CACXM,IAAK,KACLC,IAAK,MAEPC,aAAc,KACdN,mBAAmB,EACnBC,eAAe,G,4CCVJM,EACL,IADKA,EAEL,QAGKC,EAAU,mCAEVC,EACF,UADEA,EAEG,U,mBC+BhB,IAUeC,eAJS,SAACC,GAAD,MAAY,CAClCR,SAAUQ,EAAMR,aAPS,SAACS,GAAD,MAAe,CACxCC,YADwC,SAC5BV,GACVS,EAASlB,EAA4BS,QAQ1BO,EA3CR,YAAkD,IAA1BG,EAAyB,EAAzBA,YAAaV,EAAY,EAAZA,SAC1C,EAAwCW,mBAASX,GAAjD,mBAAOR,EAAP,KAAqBoB,EAArB,KAWMC,ECjBD,SAAqBC,EAAOC,GACjC,MAA4CJ,mBAASG,GAArD,mBAAOE,EAAP,KAAuBC,EAAvB,KAYA,OAVAC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBH,EAAkBH,KACjBC,GAEH,OAAO,WACLM,aAAaF,MAEd,CAACL,EAAOC,IAEJC,EDIqBM,CAAY9B,EAdtB,KAsBlB,OANA0B,qBAAU,WACJlB,IAAaa,GACfH,EAAYG,KAEb,CAACA,EAAqBH,EAAaV,IAGpC,sBAAMuB,SAbgB,SAACC,GACvBA,EAAIC,kBAY6BC,UAAU,gBAA3C,SACE,uBACEZ,MAAOtB,EACPmC,SAAU,SAACH,GAAD,OArBQ,SAACA,GACvBA,EAAIC,iBACJb,EAAgBY,EAAII,cAAcd,OAmBXe,CAAgBL,IACnCE,UAAU,uBACVjC,KAAK,OACLqC,YAAY,uBEhCb,SAASC,EAAT,GAAmE,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KAC/D,OACE,qBAAIR,UAAU,2BAAd,UACE,mBAAGA,UAAU,2BAAb,SAAyCQ,IACzC,mBAAGR,UAAU,kCAAb,SAAgDM,IAChD,mBAAGN,UAAU,kCAAb,SAAgDO,O,sCCAzCE,EACX,SAAC3C,GAAD,OAAkB,SAACiB,EAAU2B,EAAWC,GACtCA,EACGC,IAAIhC,EAAmB,CACtBiC,OAAQ,CACNC,EAAGhD,EACHiD,MAAOpC,KAGVqC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPlC,EACElB,EAA+B,CAC7BU,IAAK0C,EAAKC,MAAMC,IAChBA,IAAKF,EAAKC,MAAMC,OAGpBpC,EAASlB,GAAqC,IAC9CkB,EAASlB,GAAiC,OAE3CuD,OAAM,SAACH,GACNlC,EAASlB,GAAqC,IAC9CkB,EAASlB,GAAiC,SAIrCwD,EACX,SAAC,GAAD,IAAG9C,EAAH,EAAGA,IAAK4C,EAAR,EAAQA,IAAR,OACA,SAACpC,EAAU2B,EAAWC,GACpBA,EACGC,IAAIhC,EAAwB,CAC3BiC,OAAQ,CACNtC,IAAKA,EACL4C,IAAKA,EACLG,QAAS,kBACTC,MAAO,SACPR,MAAOpC,KAGVqC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPlC,EACElB,EC7CwB,SAAC2D,GACjC,IAAIC,EAAYC,IAAM,IAAIC,MACtBC,EAAiBJ,EAAaK,KAAI,SAACC,EAAMC,GAC3C,MAAO,CACLvB,KAAMiB,EAAUO,IAAID,EAAO,OAAOE,OAAO,eACzC3B,YAAa4B,KAAKC,MAAML,EAAKM,KAAKC,KAClC9B,YAAauB,EAAKQ,QAAQ,GAAGC,SAMjC,OAFAX,EAAeY,MAERZ,EDkCGa,CAAmBxB,EAAKyB,MAAMC,WAGlC5D,EAASlB,GAAiC,OAE3CuD,OAAM,kBAAMwB,IAhDG,6CEDf,SAASC,EAAT,GAAmC,IAAVC,EAAS,EAATA,MACxBC,EAAUC,cAShB,OACE,sBAAKhD,UAAU,iBAAf,UACE,wBACEA,UAAS,+BACP8C,EAAK,+BAAoC,IAE3CG,QAbqB,WACzBF,EAAQG,KAAKxE,IAQX,iBAQA,wBACEsB,UAAS,+BACN8C,EAAyC,GAA1C,gCAEFG,QAjBsB,WAC1BF,EAAQG,KAAKxE,IAYX,qBCwCN,IAmBeG,eARS,SAACC,GAAD,MAAY,CAClChB,aAAcgB,EAAMR,SACpBL,YAAaa,EAAMb,YACnBQ,aAAcK,EAAML,aACpBL,cAAeU,EAAMV,cACrBD,kBAAmBW,EAAMX,sBAhBA,SAACY,GAAD,MAAe,CACxCoE,eADwC,SACzBrF,GACbiB,EAASlB,EAA+B,CAAEU,IAAK,KAAM4C,IAAK,QAC1DpC,EAASlB,EAAgC,OACzCkB,EAAS0B,EAAiB3C,KAE5BsF,eANwC,SAMzBnF,GACbc,EAASsC,EAAiBpD,QAYfY,EA1ER,YAQH,IAPFsE,EAOC,EAPDA,eACAC,EAMC,EANDA,eACAtF,EAKC,EALDA,aACAG,EAIC,EAJDA,YACAQ,EAGC,EAHDA,aACAL,EAEC,EAFDA,cACAD,EACC,EADDA,kBAkBA,OAhBAqB,qBAAU,WACa,KAAjB1B,GAAwBM,GAC1B+E,EAAerF,KAEhB,CAACqF,EAAgBrF,EAAcM,IAElCoB,qBAAU,WAEc,OAApBvB,EAAYM,KACQ,OAApBN,EAAYkD,KACX/C,GAEDgF,EAAenF,KAEhB,CAACmF,EAAgBnF,EAAaG,IAEb,MAAhBK,EAEA,uBAAMuB,UAAU,YAAhB,UACE,cAAC6C,EAAD,CAAeC,OAAO,IACtB,cAAC,EAAD,IACA,yBAAS9C,UAAU,qBAAnB,UACI7B,GAAqB,wDAO7B,uBAAM6B,UAAU,YAAhB,UACE,cAAC6C,EAAD,CAAeC,OAAO,IACtB,cAAC,EAAD,IACA,0BAAS9C,UAAU,qBAAnB,UACE,oBAAIA,UAAU,4BAAd,SAA2ClC,IAC3C,oBAAIkC,UAAU,2BAAd,SACE,cAACK,EAAD,CACEC,YAAa7B,EAAa,GAAG6B,YAC7BC,YAAa9B,EAAa,GAAG8B,YAC7BC,KAAM/B,EAAa,GAAG+B,kBCYlC,IAmBe3B,eARS,SAACC,GAAD,MAAY,CAClChB,aAAcgB,EAAMR,SACpBL,YAAaa,EAAMb,YACnBQ,aAAcK,EAAML,aACpBL,cAAeU,EAAMV,cACrBD,kBAAmBW,EAAMX,sBAhBA,SAACY,GAAD,MAAe,CACxCoE,eADwC,SACzBrF,GACbiB,EAASlB,EAA+B,CAAEU,IAAK,KAAM4C,IAAK,QAC1DpC,EAASlB,EAAgC,OACzCkB,EAAS0B,EAAiB3C,KAE5BsF,eANwC,SAMzBnF,GACbc,EAASsC,EAAiBpD,QAYfY,EA/ER,YAQH,IAPFsE,EAOC,EAPDA,eACAC,EAMC,EANDA,eACAtF,EAKC,EALDA,aACAG,EAIC,EAJDA,YACAQ,EAGC,EAHDA,aACAL,EAEC,EAFDA,cACAD,EACC,EADDA,kBAkBA,OAhBAqB,qBAAU,WACHpB,GAAkC,KAAjBN,GACpBqF,EAAerF,KAEhB,CAACqF,EAAgBrF,EAAcM,IAElCoB,qBAAU,WAEc,OAApBvB,EAAYM,KACQ,OAApBN,EAAYkD,KACX/C,GAEDgF,EAAenF,KAEhB,CAACmF,EAAgBnF,EAAaG,IAEb,MAAhBK,EAEA,uBAAMuB,UAAU,YAAhB,UACE,cAAC6C,EAAD,CAAeC,OAAO,IACtB,cAAC,EAAD,IACA,yBAAS9C,UAAU,qBAAnB,UACI7B,GAAqB,wDAO7B,uBAAM6B,UAAU,YAAhB,UACE,cAAC6C,EAAD,CAAeC,OAAO,IACtB,cAAC,EAAD,IACA,0BAAS9C,UAAU,qBAAnB,UACE,oBAAIA,UAAU,4BAAd,SAA2ClC,IAC3C,oBAAIkC,UAAU,2BAAd,SACGvB,EAAaoD,KAAI,SAACC,EAAMC,GACvB,OACE,cAAC1B,EAAD,CAEEC,YAAawB,EAAKxB,YAClBC,YAAauB,EAAKvB,YAClBC,KAAMsB,EAAKtB,MAHNuB,iBCrDd,SAASsB,IACd,OACE,uBAAMrD,UAAU,YAAhB,UACE,oBAAIA,UAAU,wBAAd,iBACA,mBAAGA,UAAU,uBAAb,+BCkBSsD,MAlBf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAM9E,EAAnB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAO6E,OAAK,EAACC,KAAM9E,EAAnB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,UACE,cAAC2E,EAAD,YCNJ1C,ECLQ8C,IAAMC,OAAO,CACvBC,QALgB,0CAMhBC,QALoB,MDUlBC,EAAQC,uBZAP,WAAgD,IAA/BhF,EAA8B,uDAAtBT,EAAc0F,EAAQ,uCACpD,OAAQA,EAAOhG,MACb,KAAKH,EACH,OAAO,2BACFkB,GADL,IAEER,SAAUyF,EAAO/F,QACjBI,eAAe,IAGnB,KAAKR,EACH,OAAO,2BACFkB,GADL,IAEEb,YAAa8F,EAAO/F,UAGxB,KAAKJ,EACH,OAAO,2BACFkB,GADL,IAEEL,aAAcsF,EAAO/F,UAEzB,KAAKJ,EACH,OAAO,2BACFkB,GADL,IAEEX,kBAAmB4F,EAAO/F,UAE9B,QACE,OAAOc,KYxBXkF,8BAAoBC,0BAAgBC,IAAMC,kBAAkBxD,MAG9DyD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,W","file":"static/js/main.ee463772.chunk.js","sourcesContent":["export const ActionType = {\r\n  SET_LOCATION: 'weather-app/setLocation',\r\n  SET_COORDINATES: 'weather-app/setCoordinates',\r\n  SET_WEEKWEATHERS: 'weather-app/setWeekWeathers',\r\n  SET_IS_LOCATION_CORRECT: 'weather-app/setIsLocationCorrect',\r\n  SET_IS_DATA_UPDATED: 'weather-app/setIsDataUpdated',\r\n};\r\n\r\nexport const ActionGenerator = {\r\n  setLocation: (locationName) => ({\r\n    type: ActionType.SET_LOCATION,\r\n    payload: locationName,\r\n  }),\r\n\r\n  setCoordinates: (coordinates) => ({\r\n    type: ActionType.SET_COORDINATES,\r\n    payload: coordinates,\r\n  }),\r\n\r\n  setWeekWeathers: (weatherData) => ({\r\n    type: ActionType.SET_WEEKWEATHERS,\r\n    payload: weatherData,\r\n  }),\r\n\r\n  setIsLocationCorrect: (isLocationCorrect) => ({\r\n    type: ActionType.SET_IS_LOCATION_CORRECT,\r\n    payload: isLocationCorrect,\r\n  }),\r\n\r\n  setIsDataUpdated: (isDataUpdated) => ({\r\n    type: ActionType.SET_IS_DATA_UPDATED,\r\n    payload: isDataUpdated,\r\n  }),\r\n};\r\n","import { ActionType } from './action';\r\n\r\nconst initialState = {\r\n  location: '',\r\n  coordinates: {\r\n    lat: null,\r\n    lng: null,\r\n  },\r\n  weekWeathers: null,\r\n  isLocationCorrect: true,\r\n  isDataUpdated: false,\r\n};\r\n\r\nexport function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ActionType.SET_LOCATION:\r\n      return {\r\n        ...state,\r\n        location: action.payload,\r\n        isDataUpdated: false,\r\n      };\r\n\r\n    case ActionType.SET_COORDINATES:\r\n      return {\r\n        ...state,\r\n        coordinates: action.payload,\r\n      };\r\n\r\n    case ActionType.SET_WEEKWEATHERS:\r\n      return {\r\n        ...state,\r\n        weekWeathers: action.payload,\r\n      };\r\n    case ActionType.SET_IS_LOCATION_CORRECT:\r\n      return {\r\n        ...state,\r\n        isLocationCorrect: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const AppRoute = {\r\n  ROOT: '/',\r\n  WEEK: '/week',\r\n};\r\n\r\nexport const API_KEY = '19c1274fa4a283da3c684631c6063f69';\r\n\r\nexport const AppiRoute = {\r\n  WEATHER: 'weather',\r\n  WEEK_WEATHER: 'onecall',\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDebounce } from '../../hooks/useDebaunse';\r\nimport { connect } from 'react-redux';\r\nimport { ActionGenerator } from '../../store/action';\r\n\r\nconst INPUT_DELAY = 500;\r\n\r\nexport function LocationForm({ setLocation, location }) {\r\n  const [locationName, setLocationName] = useState(location);\r\n\r\n  const onChangeHandler = (evt) => {\r\n    evt.preventDefault();\r\n    setLocationName(evt.currentTarget.value);\r\n  };\r\n\r\n  const onSubmitHandler = (evt) => {\r\n    evt.preventDefault();\r\n  };\r\n\r\n  const debaunsedInputValue = useDebounce(locationName, INPUT_DELAY);\r\n\r\n  useEffect(() => {\r\n    if (location !== debaunsedInputValue) {\r\n      setLocation(debaunsedInputValue);\r\n    }\r\n  }, [debaunsedInputValue, setLocation, location]);\r\n\r\n  return (\r\n    <form onSubmit={onSubmitHandler} className='location-form'>\r\n      <input\r\n        value={locationName}\r\n        onChange={(evt) => onChangeHandler(evt)}\r\n        className='location-form__input'\r\n        type='text'\r\n        placeholder='Location name'\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setLocation(location) {\r\n    dispatch(ActionGenerator.setLocation(location));\r\n  },\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  location: state.location,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationForm);\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport function useDebounce(value, delay) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n","import React from 'react';\r\n\r\nexport function ResultInformationDay({ temperature, description, date }) {\r\n  return (\r\n    <li className='result-information__item'>\r\n      <p className='result-information__date'>{date}</p>\r\n      <p className='result-information__temperature'>{temperature}</p>\r\n      <p className='result-information__description'>{description}</p>\r\n    </li>\r\n  );\r\n}\r\n","import { ActionGenerator } from './action';\r\nimport { AppiRoute, API_KEY } from '../utils/const';\r\nimport { weekWeatherAdapter } from '../utils/utils';\r\nimport swal from 'sweetalert';\r\n\r\nconst ERROR_MESSAGE = 'An error occurred while loading data';\r\n\r\nexport const fetchCoordinates =\r\n  (locationName) => (dispatch, _getState, api) => {\r\n    api\r\n      .get(AppiRoute.WEATHER, {\r\n        params: {\r\n          q: locationName,\r\n          appid: API_KEY,\r\n        },\r\n      })\r\n      .then(({ data }) => {\r\n        dispatch(\r\n          ActionGenerator.setCoordinates({\r\n            lat: data.coord.lon,\r\n            lon: data.coord.lon,\r\n          })\r\n        );\r\n        dispatch(ActionGenerator.setIsLocationCorrect(true));\r\n        dispatch(ActionGenerator.setIsDataUpdated(false));\r\n      })\r\n      .catch((data) => {\r\n        dispatch(ActionGenerator.setIsLocationCorrect(false));\r\n        dispatch(ActionGenerator.setIsDataUpdated(true));\r\n      });\r\n  };\r\n\r\nexport const fetchWeekWeather =\r\n  ({ lat, lon }) =>\r\n  (dispatch, _getState, api) => {\r\n    api\r\n      .get(AppiRoute.WEEK_WEATHER, {\r\n        params: {\r\n          lat: lat,\r\n          lon: lon,\r\n          exclude: 'hourly,minutely',\r\n          units: 'metric',\r\n          appid: API_KEY,\r\n        },\r\n      })\r\n      .then(({ data }) => {\r\n        dispatch(\r\n          ActionGenerator.setWeekWeathers(\r\n            weekWeatherAdapter(data.daily.slice())\r\n          )\r\n        );\r\n        dispatch(ActionGenerator.setIsDataUpdated(true));\r\n      })\r\n      .catch(() => swal(ERROR_MESSAGE));\r\n  };\r\n","import dayjs from 'dayjs';\r\n\r\nexport const weekWeatherAdapter = (weatherArray) => {\r\n  let dateStart = dayjs(new Date());\r\n  let weathersResult = weatherArray.map((item, index) => {\r\n    return {\r\n      date: dateStart.add(index, 'day').format('D MMMM YYYY'),\r\n      temperature: Math.round(item.temp.day),\r\n      description: item.weather[0].main,\r\n    };\r\n  });\r\n\r\n  weathersResult.pop();\r\n\r\n  return weathersResult;\r\n};\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AppRoute } from '../../utils/const';\r\n\r\nexport function ChangeButtons({ isDay }) {\r\n  const history = useHistory();\r\n\r\n  const onDayButtonHandler = () => {\r\n    history.push(AppRoute.ROOT);\r\n  };\r\n\r\n  const onWeekButtonHandler = () => {\r\n    history.push(AppRoute.WEEK);\r\n  };\r\n  return (\r\n    <div className='change-buttons'>\r\n      <button\r\n        className={`change-buttons__item ${\r\n          isDay ? `change-buttons__item--active` : ''\r\n        }`}\r\n        onClick={onDayButtonHandler}\r\n      >\r\n        Day\r\n      </button>\r\n      <button\r\n        className={`change-buttons__item ${\r\n          !isDay ? `change-buttons__item--active` : ''\r\n        }`}\r\n        onClick={onWeekButtonHandler}\r\n      >\r\n        Week\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport LocationForm from '../location-form/location-form';\r\nimport { ResultInformationDay } from '../result-information-day/result-information-day';\r\nimport { fetchCoordinates, fetchWeekWeather } from '../../store/api-actions';\r\nimport { useEffect } from 'react';\r\nimport { ChangeButtons } from '../change-buttons/change-buttons';\r\nimport { ActionGenerator } from '../../store/action';\r\n\r\nexport function DayWeatherMain({\r\n  getCoordinates,\r\n  setWeekWeather,\r\n  locationName,\r\n  coordinates,\r\n  weekWeathers,\r\n  isDataUpdated,\r\n  isLocationCorrect,\r\n}) {\r\n  useEffect(() => {\r\n    if (locationName !== '' && !isDataUpdated) {\r\n      getCoordinates(locationName);\r\n    }\r\n  }, [getCoordinates, locationName, isDataUpdated]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      coordinates.lat !== null &&\r\n      coordinates.lon !== null &&\r\n      !isDataUpdated\r\n    ) {\r\n      setWeekWeather(coordinates);\r\n    }\r\n  }, [setWeekWeather, coordinates, isDataUpdated]);\r\n\r\n  if (weekWeathers == null) {\r\n    return (\r\n      <main className='main-page'>\r\n        <ChangeButtons isDay={true} />\r\n        <LocationForm />\r\n        <section className='result-information'>\r\n          {!isLocationCorrect && <p>Location not found</p>}\r\n        </section>\r\n      </main>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <main className='main-page'>\r\n      <ChangeButtons isDay={true} />\r\n      <LocationForm />\r\n      <section className='result-information'>\r\n        <h2 className='result-information__title'>{locationName}</h2>\r\n        <ul className='result-information__list'>\r\n          <ResultInformationDay\r\n            temperature={weekWeathers[0].temperature}\r\n            description={weekWeathers[0].description}\r\n            date={weekWeathers[0].date}\r\n          />\r\n        </ul>\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getCoordinates(locationName) {\r\n    dispatch(ActionGenerator.setCoordinates({ lat: null, lon: null }));\r\n    dispatch(ActionGenerator.setWeekWeathers(null));\r\n    dispatch(fetchCoordinates(locationName));\r\n  },\r\n  setWeekWeather(coordinates) {\r\n    dispatch(fetchWeekWeather(coordinates));\r\n  },\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  locationName: state.location,\r\n  coordinates: state.coordinates,\r\n  weekWeathers: state.weekWeathers,\r\n  isDataUpdated: state.isDataUpdated,\r\n  isLocationCorrect: state.isLocationCorrect,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DayWeatherMain);\r\n","import React, { useEffect } from 'react';\r\nimport LocationForm from '../location-form/location-form';\r\nimport { ResultInformationDay } from '../result-information-day/result-information-day';\r\nimport { connect } from 'react-redux';\r\nimport { fetchCoordinates, fetchWeekWeather } from '../../store/api-actions';\r\nimport { ChangeButtons } from '../change-buttons/change-buttons';\r\nimport { ActionGenerator } from '../../store/action';\r\n\r\nexport function WeekWeatherMain({\r\n  getCoordinates,\r\n  setWeekWeather,\r\n  locationName,\r\n  coordinates,\r\n  weekWeathers,\r\n  isDataUpdated,\r\n  isLocationCorrect,\r\n}) {\r\n  useEffect(() => {\r\n    if (!isDataUpdated && locationName !== '') {\r\n      getCoordinates(locationName);\r\n    }\r\n  }, [getCoordinates, locationName, isDataUpdated]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      coordinates.lat !== null &&\r\n      coordinates.lon !== null &&\r\n      !isDataUpdated\r\n    ) {\r\n      setWeekWeather(coordinates);\r\n    }\r\n  }, [setWeekWeather, coordinates, isDataUpdated]);\r\n\r\n  if (weekWeathers == null) {\r\n    return (\r\n      <main className='main-page'>\r\n        <ChangeButtons isDay={true} />\r\n        <LocationForm />\r\n        <section className='result-information'>\r\n          {!isLocationCorrect && <p>Location not found</p>}\r\n        </section>\r\n      </main>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <main className='main-page'>\r\n      <ChangeButtons isDay={false} />\r\n      <LocationForm />\r\n      <section className='result-information'>\r\n        <h2 className='result-information__title'>{locationName}</h2>\r\n        <ul className='result-information__list'>\r\n          {weekWeathers.map((item, index) => {\r\n            return (\r\n              <ResultInformationDay\r\n                key={index}\r\n                temperature={item.temperature}\r\n                description={item.description}\r\n                date={item.date}\r\n              />\r\n            );\r\n          })}\r\n        </ul>\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getCoordinates(locationName) {\r\n    dispatch(ActionGenerator.setCoordinates({ lat: null, lon: null }));\r\n    dispatch(ActionGenerator.setWeekWeathers(null));\r\n    dispatch(fetchCoordinates(locationName));\r\n  },\r\n  setWeekWeather(coordinates) {\r\n    dispatch(fetchWeekWeather(coordinates));\r\n  },\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  locationName: state.location,\r\n  coordinates: state.coordinates,\r\n  weekWeathers: state.weekWeathers,\r\n  isDataUpdated: state.isDataUpdated,\r\n  isLocationCorrect: state.isLocationCorrect,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeekWeatherMain);\r\n","import React from 'react';\r\n\r\nexport function PageNotFound() {\r\n  return (\r\n    <main className='main-page'>\r\n      <h1 className='page-not-found__title'>404</h1>\r\n      <p className='page-not-found__text'>Page not found</p>\r\n    </main>\r\n  );\r\n}\r\n","import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { AppRoute } from '../../utils/const';\nimport DayWeatherMain from '../day-weather-main/day-weather-main';\nimport WeekWeatherMain from '../week-weather-main/week-weather-main';\nimport { PageNotFound } from '../page-not-found/page-not-found';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path={AppRoute.ROOT}>\n          <DayWeatherMain />\n        </Route>\n        <Route exact path={AppRoute.WEEK}>\n          <WeekWeatherMain />\n        </Route>\n        <Route>\n          <PageNotFound />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { reducer } from \"./store/reducer\";\nimport { createApi } from \"./services/api\";\nimport \"./scss/style.scss\";\nimport App from \"./components/app/app\";\n\nconst api = createApi();\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk.withExtraArgument(api)))\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import axios from \"axios\";\r\n\r\nconst BACKEND_URL = \"https://api.openweathermap.org/data/2.5\";\r\nconst REQUEST_TIMEOUT = 5000;\r\n\r\nexport const createApi = () => {\r\n  const api = axios.create({\r\n    baseURL: BACKEND_URL,\r\n    timeout: REQUEST_TIMEOUT,\r\n  });\r\n\r\n  return api;\r\n};\r\n"],"sourceRoot":""}